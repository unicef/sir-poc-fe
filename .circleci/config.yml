version: 2
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/node:8-browsers
        environment:
          RELEASE_MATCH: "release/*"
    steps:
      - restore_cache:
          keys:
            - source-{{ .Branch }}-{{ .Revision }}
#      - restore_cache:
#          keys:
#            - deps-v1-{{ checksum "package-lock.json" }}

      - checkout
      - run:
          name: setup
          command: |
            npm install polymer-cli
            npm install

      - run:
          name: build
          command: |
            npm run build

      - run:
          name: test
          command: |
            export PATH=$PWD/node_modules/.bin:$PATH

            sudo sh -c "echo 'deb http://ftp.hr.debian.org/debian sid main' >> /etc/apt/sources.list"
            sudo apt-get update
            sudo apt-get install -t sid firefox
            firefox --version
            apt-get remove binutils

            xvfb-run -a polymer test --skip-selenium-install

      - save_cache:
          key: source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

#      - save_cache:
#          key: deps-v1-{{ checksum "package-lock.json" }}
#          paths:
#            - "./node_modules"

      - deploy:
          name: tag and release if release candidate
          command: |
              if [[ $CIRCLE_BRANCH == $RELEASE_MATCH ]]; then
                curl --user ${CIRCLE_TOKEN}: \
                  --fail \
                  --data build_parameters[CIRCLE_JOB]=tag \
                  --data revision=$CIRCLE_SHA1 \
                  https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              else
                echo "Skipped as '$CIRCLE_BRANCH' does not match '$RELEASE_MATCH' branch"
              fi
  tag:
    docker:
      - image: circleci/node:8
        environment:
          API_URL: https://api.github.com/repos/unicef/sir-poc-fe
          RELEASE_MATCH: "release/*"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "36:e1:ae:c3:f2:0f:27:67:85:44:78:5d:ec:2f:b2:0d"
      - run:
          name: close release and create/push tag
          command: |
            export PATH=/home/circleci/.local/bin:$PATH
            export TAG=${TAG:=${CIRCLE_BRANCH#*/}}
            git status
            git show-branch "release/$TAG"
            git reset --hard

            git config user.email "ci@unicef.org"
            git config user.name "CI"

            echo
            echo "Process master"
            git checkout master
            git pull
            git merge --no-ff release/$TAG -m "merge release/$TAG"
            echo

            echo "Creating tag $TAG"
            git tag -a -m "v$TAG" $TAG
            echo

            echo "Process develop"
            git checkout develop
            git pull
            git merge --no-ff release/$TAG -m "merge release/$TAG"
            echo

            echo "Deleting branch release/$TAG"
            git branch -d release/$TAG
            echo

            echo "Pushing everything to origin"
            git push --verbose --all
            git push --verbose --tags
            git push origin --verbose --delete release/$TAG
      - run:
          name: create github release
          command: |
            export TAG=${TAG:=${CIRCLE_BRANCH#*/}}
            echo
            export TODAY=`date '+%d %B %Y at %H:%M'`
            function is_pre()
            {
                [[ "$(echo "$TAG" | sed 's/[0-9.]//g')" == "" ]] && echo false || echo true
            }
            function data() {
            cat <<EOF
            { "tag_name": "$TAG",
              "name": "v$TAG",
              "body": "version $TAG - Built on $TODAY",
              "draft": false,
              "prerelease": $(is_pre)
            }
            EOF
            }
            data=$(data)
            curl -X POST -s \
              --fail --verbose \
              -H "Accept: application/json" \
              -H "Content-Type:application/json" \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              ${API_URL}/releases \
              -d "$data"
      - deploy:
          name: dockerize
          command: |
              env | sort
              if [[ $CIRCLE_BRANCH == $RELEASE_MATCH ]]; then
                curl --user ${CIRCLE_RELEASE_TOKEN}: \
                  --fail \
                  --data build_parameters[BUILD_TAG]=$TAG \
                  --data build_parameters[CIRCLE_JOB]=make_docker_image \
                  https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              else
                echo "Skipped as '$CIRCLE_BRANCH' does not match '$RELEASE_MATCH' branch"
              fi
  make_docker_image:
    working_directory: ~/code
    docker:
      - image: docker:17.05.0-ce-git
        environment:
          PGHOST: 127.0.0.1
          PIPENV_VENV_IN_PROJECT: 1
          DATABASE_URL: "postgres://postgres:postgres@127.0.0.1:5432/test_sir"
      - image: circleci/postgres:9.6-alpine-postgis
        environment:
          POSTGRES_USER: postgres
          PGUSER: postgres
          POSTGRES_DB: test_sir
          POSTGRES_PASSWORD: postgres

    environment:
      DOCKER_IMAGE: unicef/sir-fe
    steps:
      - add_ssh_keys:
          fingerprints:
            - "2b:6f:56:d6:6d:01:3d:81:44:3f:81:98:e9:ef:fe:ff"
      - setup_remote_docker
      - run:
          name: Echo environment
          command: |
            env | sort
      - checkout
      - run:
          name: Build Backend docker image 'unicef/sir-fe'
          command: |
            if [ -z "$BUILD_TAG" ];then
              BUILD_TAG=$TAG
            fi
            if [ -z "$BUILD_TAG" ];then
              echo "Tag not set. exit"
              exit 1
            fi
            echo "export BUILD_TAG=$BUILD_TAG" >> $BASH_ENV
            echo "Building ${DOCKER_IMAGE}:${BUILD_TAG}"
            source $BASH_ENV

            docker build ${BUILD_OPTIONS} \
                    --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} \
                    --build-arg VERSION=${BUILD_TAG} \
                    -t ${DOCKER_IMAGE}:${BUILD_TAG} \
                    -f docker/Dockerfile .
            docker images | grep ${DOCKER_IMAGE}

      - run:
          name: Test Backend docker image
          command: |
            source $BASH_ENV
            echo "Testing ${DOCKER_IMAGE}:${BUILD_TAG}"
#            docker run -p 8000:8081 --rm \
#                    -it ${DOCKER_IMAGE}:${TARGET} \
#                    polymer lint

      - deploy:
          name: Push docker image
          command: |
              source $BASH_ENV
              echo "Pushing ${DOCKER_IMAGE}:${BUILD_TAG}"
              export TODAY=`date '+%d %B %Y at %H:%M'`

              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag ${DOCKER_IMAGE}:${BUILD_TAG} ${DOCKER_IMAGE}:latest
              docker push ${DOCKER_IMAGE}:latest
              docker push ${DOCKER_IMAGE}:${BUILD_TAG}
